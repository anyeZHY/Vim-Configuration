global !p

HatSequence = r"\overline \bar \hat \tilde \widetilde \widehat".split()

DotsSequence = r"\ldots \cdots \vdots \ddots".split()

FontSizeSequence = r"\tiny \scriptsize \footnotesize \small \normalsize \large \Large \LARGE \huge \Huge".split()

SpaceSequence = r"\,|\:|\;|\ |\quad|\qquad|\!".split("|")

LeftArrows = r"\leftarrow|\longleftarrow|\Leftarrow|\Longleftarrow|\xleftarrow".split("|")

RightArrows = r"\to|\rightarrow|\longrightarrow|\Rightarrow|\Longrightarrow|\xrightarrow".split("|")

LeftrightArrows = ["\\" + x for x in "leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff".split("|")]

texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def findmatched_parentheses(line, lindex):
	depth = 0
	matched = {"(":")", ")":"(", "[":"]", "]":"[", "{":"}", "}":"{"}
	c = line[lindex]
	d = matched[c]
	if line[lindex] in ["(", "[", "{"]:
		for index in range(lindex, len(line)):
			if line[index] == c:
				depth += 1
			elif line[index] == d:
				depth -= 1
			if depth == 0:
				return index
	elif line[lindex] in [")", "]", "}"]:
		for index in range(lindex, -1, -1):
			if line[index] == c:
				depth += 1
			elif line[index] == d:
				depth -= 1
			if depth == 0:
				return index
	return -1

endglobal
# Here we go!

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet SSE "section" bA
\section{$1}$0
endsnippet

snippet SSS "subsection" bA
\subsection{$1}$0
endsnippet

snippet EAD "aligned" bA
\begin{aligned}
	$0
\end{aligned}
endsnippet

snippet EDF "defination" bA
\begin{defi}$1
	$0
\end{defi}
endsnippet

snippet ELA "law" bA
\begin{law}$1
	$0
\end{law}
endsnippet

snippet ETH "theorem" bA
\begin{thm}$1
	$0
\end{thm}
endsnippet

snippet ECO "corollary" bA
\begin{cor}$1
	$0
\end{cor}
endsnippet

snippet EPT "property" bA
\begin{prt}$1
	$0
\end{prt}
endsnippet

snippet EPP "proposition" bA
\begin{prp}$1
	$0
\end{prp}
endsnippet

snippet ERE "remark" bA
\begin{remark}$1
	$0
\end{remark}
endsnippet

snippet ELE "lemma" bA
\begin{lemma}$1
	$0
\end{lemma}
endsnippet

snippet EPR "proof" bA
\begin{proof}$1
	$0
\end{proof}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
    $1
.\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\$2frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet != "equals" iA
\ne 
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

priority 100
context "math()"
snippet "(forall|AA|âˆ€)" "forall" riA
\forall
endsnippet

context "math()"
snippet EE "exist" iA
\exists
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to
endsnippet

snippet <- "leftarrow" iA
\leftarrow
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\Leftrightarrow
endsnippet

priority 200
context "math()"
snippet <> "lrangle" iA
\angbr
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet

context math()"
snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet || "mid" iA
 \mid 
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} \,\dd $0
endsnippet

snippet dfun "Definition of function" iA
$1\colon ${2:\mathbb{R}} \to ${3:\mathbb{R}},\ ${4:x} \mapsto $0
endsnippet

snippet "(\\(tiny|scriptsize|footnotesize|small|normalsize|large|Large|LARGE|huge|Huge))" "next type of font size" wr
`!p
symbol_list = FontSizeSequence
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

context "math()"
snippet "(\\(leftarrow|longleftarrow|Leftarrow|Longleftarrow|xleftarrow))" "next type of left arrow" wr
`!p
symbol_list = LeftArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

context "math()"
snippet "(\\(to|rightarrow|longrightarrow|Rightarrow|Longrightarrow|xrightarrow))" "next type of right arrow" wr
`!p
symbol_list = RightArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

context "math()"
snippet "(\\(leftrightarrow|longleftrightarrow|Leftrightarrow|Longleftrightarrow|iff))" "next type of left right arrow" wr
`!p
symbol_list = LeftrightArrows
index = symbol_list.index(match.group(1))
snip.rv = symbol_list[(index + 1) % len(symbol_list)]
`
endsnippet

snippet "tplot\(([\da-zA-Z\s+\-*/\(\),\^]+)\)" "plot function" wr
\begin{figure}[H]
    \centering
    \begin{tikzpicture}
        \begin{axis}[samples=500,domain= ${1:-pi} : ${2:${1/-//g}} ,restrict y to domain = ${3:$1} : ${4:${3/-//g}}]
        \addplot[${5:blue}] plot ({\x},{`!p
expression = match.group(1)
expression = re.sub("(?<=\d)x", "*x", expression)
expression = re.sub("(?<![a-zA-Z])x(?![a-zA-Z])", r"\\x", expression)
pindexs = sorted([findmatched_parentheses(expression, x.span()[1]) for x in re.finditer(r"\bsin\b", expression)])
expression = " r".join([expression[x:y] for x, y in zip([0] + pindexs, pindexs + [len(expression)])])
expression = "max(min(%s, %s), %s)" % (expression, t[4], t[3])
snip.rv = expression
`});
        \end{axis}
    \end{tikzpicture}
\end{figure}$0
endsnippet

context "math()"
snippet ;7 "hbar" iA
\hbar
endsnippet

context "math()"
snippet ... "cdots" iA
\cdots
endsnippet

snippet EAL "algorithm" bA
\begin{algorithm}[htbp]
	\caption{$1}
	\label{$2}
	\begin{algorithmic}[1]
		\renewcommand{\algorithmicrequire}{\textbf{Input:}}
		\renewcommand{\algorithmicensure}{\textbf{Output:}}
		\renewcommand{\algorithmiccomment}[1]{\hfill\textit{\textcolor{blue}{\##1}}}
		\REQUIRE $3
		\ENSURE $4
		\STATE $5
		\RETURN $6
	\end{algorithmic} 
\end{algorithm}
endsnippet
